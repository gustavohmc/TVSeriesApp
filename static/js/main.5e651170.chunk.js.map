{"version":3,"sources":["assets/tenor.gif","components/SeriesList/index.js","components/loader/index.js","components/intro/index.js","containers/series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","Link","to","concat","show","id","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","Loader","style","width","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","_this$state","this","intro","type","onChange","length","trim","loader","src_components_SeriesList","Component","SingleSeries","_this2","match","params","premiered","rating","average","image","medium","Main","Switch","Route","exact","path","component","App","components_Main","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e651170.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tenor.a6a6686c.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst SeriesListItem = ({series}) => (\r\n  <li>\r\n    <Link to={`/series/${series.show.id}`}>\r\n      {series.show.name};\r\n    </Link>\r\n  </li>\r\n)\r\n\r\nconst SeriesList = (props) => {\r\n  return (\r\n    <div>\r\n      <ul className=\"series-list\">\r\n        {props.list.map(series => (\r\n          <SeriesListItem series={series} key={series.show.id} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeriesList;\r\n","import React from 'react';\r\nimport loaderSrc from '../../assets/tenor.gif';\r\n\r\nconst Loader = props => (\r\n  <div>\r\n    <img\r\n      style={{width: 75}}\r\n      alt=\"loader icon\"\r\n      src={loaderSrc}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\n\r\nconst Intro = (props) => (\r\n  <p className=\"App-intro\">\r\n    {props.message}\r\n  </p>\r\n);\r\n\r\nexport default Intro;\r\n","import React, {Component} from 'react';\r\nimport SeriesList from '../../components/SeriesList';\r\nimport Loader from '../../components/loader';\r\nimport Intro from '../../components/intro';\r\n\r\n\r\nclass Series extends Component {\r\n  state = {\r\n    series: [],\r\n    seriesName: '',\r\n    isFetching: false\r\n  }\r\n\r\n  onSeriesInputChange = e => {\r\n    this.setState({seriesName: e.target.value, isFetching: true});\r\n    fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n      .then(response => response.json())\r\n      .then(json => this.setState({series: json, isFetching: false}))\r\n  }\r\n\r\n  render() {\r\n    const {series, seriesName, isFetching} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Intro message=\"Here you can find all of your most loved series\"/>\r\n        <div>\r\n          <input\r\n            value={seriesName}\r\n            type=\"text\"\r\n            onChange={this.onSeriesInputChange}/>\r\n        </div>\r\n        {\r\n          !isFetching && series.length === 0 && seriesName.trim() === ''\r\n          &&\r\n          <p>Please enter series name into the input</p>\r\n        }\r\n        {\r\n          !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n          &&\r\n          <p>No TV series with this name</p>\r\n        }\r\n        {\r\n          isFetching && <Loader />\r\n        }\r\n        {\r\n          !isFetching && <SeriesList list={this.state.series} />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Series;\r\n","import React, {Component} from 'react';\r\nimport Loader from '../../components/loader';\r\n\r\n\r\nclass SingleSeries extends Component {\r\n  state = {\r\n    show: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {id} = this.props.match.params;\r\n\r\n    fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n      .then(response => response.json())\r\n      .then(json => this.setState({show: json}))\r\n  }\r\n\r\n  render(){\r\n    const {show} = this.state;\r\n    return (\r\n      <div>\r\n        {show === null && <Loader />}\r\n        {\r\n          show !== null\r\n          &&\r\n          <div>\r\n            <p>{show.name}</p>\r\n            <p>Premiered - {show.premiered}</p>\r\n            <p>Rating - {show.rating.average}</p>\r\n            <p>\r\n              <img alt=\"Show\" src={show.image.medium} />\r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SingleSeries;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Series from '../../containers/series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\n\r\nconst Main = props => (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Series} />\r\n      <Route path=\"/series/:id\" component={SingleSeries} />\r\n    </Switch>\r\n)\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport Main from '../Main'\nimport './App.css';\nimport 'whatwg-fetch';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            TV Series List\n          </p>\n        </header>\n\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}